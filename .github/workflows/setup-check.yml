# Copyright Kani Contributors
# SPDX-License-Identifier: Apache-2.0 OR MIT
#
# This workflow will build, and, optionally, release Kani bundles in this order.
#
# The release will create a draft release and upload the bundles to it, and it will only run when we push a new
# release tag (i.e.: tag named `kani-*`).
name: Check Setup
on:
  pull_request:
  push:
    # Run on changes to branches but not tags.
    branches:
      - '**'


jobs:
  build_bundle_macos:
    name: BuildBundle-MacOs
    runs-on: macos-13
    permissions:
      contents: write
    outputs:
      version: ${{ steps.bundle.outputs.version }}
      bundle: ${{ steps.bundle.outputs.bundle }}
      package: ${{ steps.bundle.outputs.package }}
      crate_version: ${{ steps.bundle.outputs.crate_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kani Dependencies
        uses: ./.github/actions/setup
        with:
          os: macos-13

      - name: Build bundle
        id: bundle
        uses: ./.github/actions/build-bundle
        with:
          os: macos-13
          arch: x86_64-apple-darwin

  build_bundle_linux:
    name: BuildBundle-Linux
    runs-on: ubuntu-20.04
    outputs:
      # The bundle version (latest or the version to be released)
      version: ${{ steps.bundle.outputs.version }}
      bundle: ${{ steps.bundle.outputs.bundle }}
      package: ${{ steps.bundle.outputs.package }}
      crate_version: ${{ steps.bundle.outputs.crate_version }}
    container:
      # Build using ubuntu 18 due to compatibility issues with older OS.
      image: ubuntu:18.04
      volumes:
        - /usr/local:/mnt/host-local
    steps:

      - name: Free up docker disk space
        run: |
          # inspired by https://github.com/easimon/maximize-build-space/blob/master/action.yml
          df -h
          rm -r /mnt/host-local/lib/android /mnt/host-local/.ghcup
          df -h

      # This is required before checkout because the container does not
      # have Git installed, so cannot run checkout action.
      # The checkout action requires Git >=2.18 and python 3.7, so use the Git maintainers' PPA.
      # and the "deadsnakes" PPA, as the default version of python on ubuntu 22.04 is Python 3.10
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y software-properties-common apt-utils
          add-apt-repository ppa:git-core/ppa
          add-apt-repository ppa:deadsnakes/ppa
          apt-get update
          apt-get install -y \
            build-essential bash-completion curl lsb-release sudo g++ gcc flex \
            bison make patch git python3.7 python3.7-dev python3.7-distutils
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1
          curl -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python3 get-pip.py --force-reinstall
          rm get-pip.py

      - name: Checkout Kani
        uses: actions/checkout@v3

      - name: Setup Kani Dependencies
        uses: ./.github/actions/setup
        with:
          os: ubuntu-18.04

      - name: Build bundle
        id: bundle
        uses: ./.github/actions/build-bundle
        with:
          os: linux
          arch: x86_64-unknown-linux-gnu

  test-use-local-toolchain:
    name: TestLocalToolchain
    needs: [build_bundle_macos, build_bundle_linux]
    strategy:
      matrix:
        os: [macos-13, ubuntu-20.04, ubuntu-22.04]
        include:
          # Stores the output of the previous job conditional to the OS
          - prev_job: ${{ needs.build_bundle_linux.outputs }}
          - os: macos-13
            prev_job: ${{ needs.build_bundle_macos.outputs }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Kani
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          submodules: 'true'

      - name: Download kani-verifier crate
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.prev_job.package }}

      - name: Check download
        run: |
          ls -lh .

      - name: Install from bundle
        run: |
          cargo install --locked --path kani-verifier-${{ matrix.prev_job.crate_version }}

      - name: Extract nightly version date from rust-toolchain.toml
        id: extract-date
        run: |
          DATE=$(grep 'channel' rust-toolchain.toml | cut -d '=' -f2 | tr -d ' "' | cut -d'-' -f2-)
          echo "Nightly date: $DATE"
          echo "DATE=$DATE" >> $GITHUB_ENV

      - name: Remove installed Rust toolchain
        run: rustup toolchain remove nightly-$DATE

      - name: Create a custom toolchain directory
        run: mkdir -p ${{ github.workspace }}/custom_toolchain

      - name: Fetch the nightly tarball
        run: |
          echo "Downloading Rust toolchain from rust server."
          curl --proto '=https' --tlsv1.2 -O https://static.rust-lang.org/dist/$DATE/rust-nightly-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf rust-nightly-x86_64-unknown-linux-gnu.tar.gz
          ./rust-nightly-x86_64-unknown-linux-gnu/install.sh --prefix=${{ github.workspace }}/custom_toolchain

      - name: Ensure installation is correct
        run: |
          cargo kani setup --use-local-toolchain ${{ github.workspace }}/custom_toolchain/

      - name: Ensure that the rustup toolchain is not present
        run: ls -la ~/.rustup/toolchains/

      - name: Run tests
        run: |
          ls ./tests/cargo-ui/
          for dir in function multiple-harnesses verbose; do
            >&2 echo "Running test $dir"
            pushd ./tests/cargo-ui/$dir
            ${{github.workspace}}/target/kani/bin/cargo-kani
            popd
          done
